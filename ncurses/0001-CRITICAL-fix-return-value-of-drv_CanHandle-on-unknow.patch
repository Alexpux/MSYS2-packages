From 41f152b6e8bea7e92be960158ef4bd9df34dd8a0 Mon Sep 17 00:00:00 2001
From: Johannes Schindelin <johannes.schindelin@gmx.de>
Date: Fri, 26 Jun 2015 13:19:49 +0000
Subject: [PATCH] CRITICAL: fix return value of drv_CanHandle on unknown
 terminal

By mistake, the 5.9 -> 6.0 patches tried to reuse the `ret_error*()`
functions in both lib_driver.c and tinfo_driver.c. However, in the
latter file, the return value must be FALSE (because the type is bool),
not ERR (as it must be in lib_driver.c). As a consequence,
`_nc_get_driver()` assumed *success* when we actually failed, and worse:
we already free()d data that is still happily used by the code
afterwards because it assumed that we were successful.

Work around this by reinstating the `ret_error*()` family that returns
FALSE in tinfo_driver.c.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
---
 ncurses/tinfo/tinfo_driver.c | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/ncurses/tinfo/tinfo_driver.c b/ncurses/tinfo/tinfo_driver.c
index a17accd..9597466 100644
--- a/ncurses/tinfo/tinfo_driver.c
+++ b/ncurses/tinfo/tinfo_driver.c
@@ -113,6 +113,28 @@ drv_Name(TERMINAL_CONTROL_BLOCK * TCB)
     return "tinfo";
 }
 
+/* We need to return FALSE here, not ERR. */
+#undef ret_error
+#define ret_error(code, fmt, arg)	if (errret) {\
+					    *errret = code;\
+					    returnCode(FALSE);\
+					} else {\
+					    fprintf(stderr, fmt, arg);\
+					    exit(EXIT_FAILURE);\
+					}
+
+#undef ret_error1
+#define ret_error1(code, fmt, arg)	ret_error(code, "'%s': " fmt, arg)
+
+#undef ret_error0
+#define ret_error0(code, msg)		if (errret) {\
+					    *errret = code;\
+					    returnCode(FALSE);\
+					} else {\
+					    fprintf(stderr, msg);\
+					    exit(EXIT_FAILURE);\
+					}
+
 static bool
 drv_CanHandle(TERMINAL_CONTROL_BLOCK * TCB, const char *tname, int *errret)
 {
-- 
2.4.4

