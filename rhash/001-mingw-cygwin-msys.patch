--- RHash-1.3.5/Makefile.orig	2017-08-13 20:56:22.000000000 -0400
+++ RHash-1.3.5/Makefile	2017-10-06 10:25:53.199225800 -0400
@@ -17,7 +17,19 @@ ALLCFLAGS = -pipe $(CFLAGS) $(ADDCFLAGS)
   -Wbad-function-cast -Wmissing-prototypes -Wmissing-declarations
 LDLIBRHASH = -Llibrhash -lrhash
 ALLLDFLAGS = $(LDLIBRHASH) $(LDFLAGS) $(ADDLDFLAGS)
-SHAREDLIB  = librhash/librhash.so.0
+SONAME  = librhash.so.0
+#This is done so you can override the prefix for the dll name
+#which would be "cyg" for CygWin or "msys-" for MSYS.
+IMPLIBDLLNAME_PREFIX ?= lib
+DLLNAME_PREFIX ?= $(IMPLIBDLLNAME_PREFIX)
+DLLNAME = $(DLLNAME_PREFIX)rhash.dll
+IMPLIBDLLNAME = $(IMPLIBDLLNAME_PREFIX)rhash.dll.a
+ifdef IS_WIN
+SHAREDLIB  = librhash/$(DLLNAME)
+LDRHASH    = -L./librhash/ -lrhash
+else
+SHAREDLIB  = librhash/$(SONAME)
+endif
 SHRDLFLAGS = $(LDFLAGS) $(ADDLDFLAGS)
 HEADERS = calc_sums.h hash_print.h common_func.h hash_update.h file_mask.h file_set.h find_file.h hash_check.h output.h parse_cmdline.h rhash_main.h win_utils.h version.h
 SOURCES = calc_sums.c hash_print.c common_func.c hash_update.c file_mask.c file_set.c find_file.c hash_check.c output.c parse_cmdline.c rhash_main.c win_utils.c
@@ -177,8 +189,13 @@ check: version.h
 $(TARGET): $(OBJECTS) $(LIBRHASH)
 	$(CC) $(OBJECTS) -o $@ $(ALLLDFLAGS)
 
+ifdef IS_WIN
+$(SHARED_TRG): $(OBJECTS) $(SHAREDLIB)
+	$(CC) $(OBJECTS) $(SHRDLFLAGS) -o $(SHARED_TRG) $(LDRHASH)
+else
 $(SHARED_TRG): $(OBJECTS) $(SHAREDLIB)
 	$(CC) $(OBJECTS) $(SHRDLFLAGS) -o $(SHARED_TRG) $(SHAREDLIB)
+endif
 
 # NOTE: dependences were generated by 'gcc -Ilibrhash -MM *.c'
 # we are using plain old makefile style to support BSD make
--- RHash-1.3.5/common_func.c.orig	2017-08-13 20:56:22.000000000 -0400
+++ RHash-1.3.5/common_func.c	2017-10-06 02:10:05.201227300 -0400
@@ -13,7 +13,7 @@
 #include <errno.h>
 #include <sys/stat.h>
 
-#ifdef _WIN32
+#if defined( _WIN32) || defined(__CYGWIN__)
 #include <windows.h>
 #endif
 
@@ -347,7 +347,7 @@ int are_paths_equal(const rsh_tchar* a,
  */
 static double rsh_fsec(timedelta_t* timer)
 {
-#ifdef _WIN32
+#if defined( _WIN32) || defined(__CYGWIN__)
 	LARGE_INTEGER freq;
 	QueryPerformanceFrequency(&freq);
 	return (double)*timer / freq.QuadPart;
@@ -356,7 +356,7 @@ static double rsh_fsec(timedelta_t* time
 #endif
 }
 
-#ifdef _WIN32
+#if defined( _WIN32) || defined(__CYGWIN__)
 #include <windows.h>
 #define get_timedelta(delta) QueryPerformanceCounter((LARGE_INTEGER*)delta)
 #else
@@ -372,7 +372,7 @@ double rsh_timer_stop(timedelta_t* timer
 {
 	timedelta_t end;
 	get_timedelta(&end);
-#ifdef _WIN32
+#if defined( _WIN32) || defined(__CYGWIN__)
 	*timer = end - *timer;
 #else
 	timer->tv_sec  = end.tv_sec  - timer->tv_sec - (end.tv_usec >= timer->tv_usec ? 0 : 1);
@@ -383,7 +383,7 @@ double rsh_timer_stop(timedelta_t* timer
 
 unsigned rhash_get_ticks(void)
 {
-#ifdef _WIN32
+#if defined( _WIN32) || defined(__CYGWIN__)
 	return GetTickCount();
 #else
 	struct timeval tv;
--- RHash-1.3.5/common_func.h.orig	2017-08-13 20:56:22.000000000 -0400
+++ RHash-1.3.5/common_func.h	2017-10-06 02:17:05.428074900 -0400
@@ -24,7 +24,7 @@
 #include <time.h> /* for time_t */
 #include <stddef.h> /* for wchar_t */
 
-#ifndef _WIN32
+#if !defined( _WIN32) && !defined(__CYGWIN__)
 #include <sys/time.h> /* for timeval */
 /*#else
 #include <windows.h>*/
@@ -137,7 +137,7 @@ int file_statw(file_t* file);
 /* time data and functions */
 
 /* portable timer definition */
-#ifdef _WIN32
+#if defined( _WIN32) || defined(__CYGWIN__)
 typedef unsigned long long timedelta_t;
 #else
 #include <sys/time.h> /* for timeval */
--- RHash-1.3.5/win_utils.c.orig	2017-10-06 01:41:43.492968200 -0400
+++ RHash-1.3.5/win_utils.c	2017-10-06 01:49:05.248821700 -0400
@@ -1,3 +1,26 @@
+/* win_utils.c - Windows-specific utility functions for MSYS and CygWin */
+#ifdef __CYGWIN__
+#include <windows.h>
+#include "common_func.h"
+#include "win_utils.h"
+
+void set_benchmark_cpu_affinity(void)
+{
+	DWORD_PTR dwProcessMask, dwSysMask, dwDesired;
+
+	SetPriorityClass(GetCurrentProcess(), HIGH_PRIORITY_CLASS);
+	SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_HIGHEST);
+
+	if ( GetProcessAffinityMask(GetCurrentProcess(), &dwProcessMask, &dwSysMask) ) {
+		dwDesired = dwSysMask & (dwProcessMask & ~1); /* remove the first processor */
+		dwDesired = (dwDesired ? dwDesired : dwSysMask & ~1);
+		if (dwDesired != 0) {
+			SetProcessAffinityMask(GetCurrentProcess(), dwDesired);
+		}
+	}
+}
+#endif /* __CYGWIN__ */
+
 /* win_utils.c - Windows-specific utility functions */
 #ifdef _WIN32
 
--- RHash-1.3.5/win_utils.h.orig	2017-10-06 01:41:11.818138200 -0400
+++ RHash-1.3.5/win_utils.h	2017-10-06 01:44:57.128829900 -0400
@@ -2,6 +2,24 @@
 #ifndef WIN_UTILS_H
 #define WIN_UTILS_H
 
+#ifdef __CYGWIN__
+#include "common_func.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/**
+ * Set process priority and affinity to use any CPU but the first one,
+ * this improves benchmark results on a multi-core systems.
+ */
+void set_benchmark_cpu_affinity(void);
+
+#ifdef __cplusplus
+}
+#endif
+#endif /* __CYGWIN__ */
+
 /* windows only definitions */
 #ifdef _WIN32
 #include "common_func.h"
--- RHash-1.3.5/librhash/Makefile.orig	2017-08-13 20:56:22.000000000 -0400
+++ RHash-1.3.5/librhash/Makefile	2017-10-06 09:16:41.928482100 -0400
@@ -25,6 +25,7 @@ SO_HEADERS = $(LIB_HEADERS) $(LEGACY_LIB
 # installation directories and names
 DESTDIR =
 PREFIX  ?= /usr/local
+BINDIR  = $(PREFIX)/bin
 INCDIR  = $(PREFIX)/include
 LIBDIR  = $(PREFIX)/lib
 LIBRARY = librhash.a
@@ -32,7 +33,12 @@ SONAME  = librhash.so.0
 SOLINK  = librhash.so
 DYNAME  = librhash.0.dylib
 DYLINK  = librhash.dylib
-DLLNAME = librhash.dll
+#This is done so you can override the prefix for the dll name
+#which would be "cyg" for CygWin or "msys-" for MSYS.
+IMPLIBDLLNAME_PREFIX ?= lib
+DLLNAME_PREFIX ?= $(IMPLIBDLLNAME_PREFIX)
+DLLNAME = $(DLLNAME_PREFIX)rhash.dll
+IMPLIBDLLNAME = $(IMPLIBDLLNAME_PREFIX)rhash.dll.a
 TEST_TARGET = test_hashes
 TEST_SHARED = test_shared
 # Set variables according to GNU coding standard
@@ -42,7 +48,12 @@ INSTALL_SHARED  = $(INSTALL) -m 644
 
 all: $(LIBRARY)
 lib-static: $(LIBRARY)
+ifdef IS_WIN
+lib-shared: $(DLLNAME)
+else
 lib-shared: $(SONAME)
+endif
+
 libs-all: lib-static lib-shared
 uninstall-lib: uninstall-lib-shared uninstall-lib-static uninstall-so-link
 dylib: $(DYNAME)
@@ -53,9 +64,17 @@ install-lib-static: $(LIBRARY) install-h
 	$(INSTALL) -d $(DESTDIR)$(LIBDIR)
 	$(INSTALL_DATA) $(LIBRARY) $(DESTDIR)$(LIBDIR)/
 
+ifdef IS_WIN
+install-lib-shared: $(DLLNAME)
+	$(INSTALL) -d $(DESTDIR)$(BINDIR)
+	$(INSTALL_SHARED) $(DLLNAME) $(DESTDIR)$(BINDIR)/
+	$(INSTALL) -d $(DESTDIR)$(LIBDIR)
+	$(INSTALL_SHARED) $(IMPLIBDLLNAME) $(DESTDIR)$(LIBDIR)/
+else
 install-lib-shared: $(SONAME)
 	$(INSTALL) -d $(DESTDIR)$(LIBDIR)
 	$(INSTALL_SHARED) $(SONAME) $(DESTDIR)$(LIBDIR)/
+endif
 
 install-so-link:
 	$(INSTALL) -d $(DESTDIR)$(LIBDIR)
@@ -64,8 +83,14 @@ install-so-link:
 uninstall-lib-static: uninstall-headers
 	rm -f $(DESTDIR)$(LIBDIR)/$(LIBRARY)
 
+ifdef IS_WIN
+uninstall-lib-shared:
+	rm -f $(DESTDIR)$(BINDIR)/$(DLLNAME)
+	rm -rf $(DESTDIR)$(LIBDIR)/$(IMPLIBDLLNAME)
+else
 uninstall-lib-shared:
 	rm -f $(DESTDIR)$(LIBDIR)/$(SONAME)
+endif
 
 uninstall-so-link:
 	rm -f $(DESTDIR)$(LIBDIR)/$(SOLINK)
@@ -180,7 +205,7 @@ whirlpool_sbox.o: whirlpool_sbox.c byte_
 # MINGW: build a dll library
 $(DLLNAME): $(SOURCES)
 	sed -n '1s/.*/{ global:/p; s/^RHASH_API.* \([a-z0-9_]\+\)(.*/  \1;/p; $$s/.*/local: *; };/p' $(LIB_HEADERS) > exports.sym
-	$(CC) -DRHASH_EXPORTS $(ALLCFLAGS) -shared $(SOURCES) -Wl,--version-script,exports.sym,--output-def,librhash.def,-soname,$@ $(LIBLDFLAGS) -o $@
+	$(CC) -DRHASH_EXPORTS $(ALLCFLAGS) -shared $(SOURCES) -Wl,--version-script,exports.sym,--output-def,librhash.def,--out-implib,$(IMPLIBDLLNAME) $(LIBLDFLAGS) -o $@
 
 test-dll: $(DLLNAME) test_hashes.o
 	$(CC) $(PRGCFLAGS) test_hashes.o $(DLLNAME) -o $(TEST_SHARED) && ./$(TEST_SHARED)
@@ -204,15 +229,26 @@ $(LIBRARY): $(OBJECTS)
 $(TEST_TARGET): $(LIBRARY) test_hashes.o
 	$(CC) $(ALLCFLAGS) test_hashes.o $(LIBRARY) $(LIBLDFLAGS) -o $@
 
+ifdef IS_WIN
+test-shared: test-dll $(DLLNAME) test_hashes.o
+	$(CC) $(PRGCFLAGS) test_hashes.o $(LDRHASH) $(LIBLDFLAGS) -o $(TEST_SHARED)
+	LD_LIBRARY_PATH=.:$(LD_LIBRARY_PATH) ./$(TEST_SHARED)
+else
 test-shared: $(SONAME) test_hashes.o
 	$(CC) $(PRGCFLAGS) test_hashes.o $(SONAME) $(LIBLDFLAGS) -o $(TEST_SHARED)
 	LD_LIBRARY_PATH=.:$(LD_LIBRARY_PATH) ./$(TEST_SHARED)
+endif
 
 test-static: $(TEST_TARGET)
 	./$(TEST_TARGET)
 
+ifdef IS_WIN
+test: test-static
+	if [ -f $(DLLNAME) ]; then make test-shared; fi
+else
 test: test-static
 	if [ -f $(SONAME) ]; then make test-shared; fi
+endif
 
 clean:
 	rm -f *.o $(LIBRARY) $(TEST_TARGET) $(TEST_SHARED) $(SONAME) $(SOLINK) exports.sym $(DLLNAME) librhash.def
--- RHash-1.3.5/librhash/rhash.c.orig	2017-10-05 07:56:58.562021200 -0400
+++ RHash-1.3.5/librhash/rhash.c	2017-10-05 07:56:58.555020600 -0400
@@ -26,7 +26,7 @@
 #include <errno.h>
 
 /* modifier for Windows DLL */
-#if defined(_WIN32) && defined(RHASH_EXPORTS)
+#if (defined(_WIN32) || defined(__CYGWIN__)) && defined(RHASH_EXPORTS)
 # define RHASH_API __declspec(dllexport)
 #endif
 
@@ -788,7 +788,7 @@ size_t RHASH_API rhash_print(char* outpu
 	return rhash_print_bytes(output, digest, digest_size, flags);
 }
 
-#if defined(_WIN32) && defined(RHASH_EXPORTS)
+#if (defined(_WIN32) || defined(__CYGWIN__)) && defined(RHASH_EXPORTS)
 #include <windows.h>
 BOOL APIENTRY DllMain(HMODULE hModule, DWORD reason, LPVOID reserved);
 BOOL APIENTRY DllMain(HMODULE hModule, DWORD reason, LPVOID reserved)
--- RHash-1.3.5/librhash/plug_openssl.c.orig	2017-10-05 22:22:33.794545500 -0400
+++ RHash-1.3.5/librhash/plug_openssl.c	2017-10-05 23:00:08.586824300 -0400
@@ -32,7 +32,7 @@
 #include "plug_openssl.h"
 
 #if defined(OPENSSL_RUNTIME)
-# ifdef _WIN32
+# if(defined(_WIN32) || defined(__CYGWIN__))
 #  include <windows.h>
 # else
 #  include <dlfcn.h>
@@ -117,7 +117,7 @@ rhash_hash_info rhash_openssl_methods[]
 rhash_hash_info rhash_openssl_hash_info[RHASH_HASH_COUNT];
 
 #ifdef OPENSSL_RUNTIME
-#ifdef _WIN32
+#if (defined(_WIN32) || defined(__CYGWIN__)) /* __CYGWIN__ is also defined in MSYS */
 #define LOAD_ADDR(n, name) \
 	p##name##_final = (os_fin_t)GetProcAddress(handle, #name "_Final"); \
 	rhash_openssl_methods[n].update = (pupdate_t)GetProcAddress(handle, #name "_Update"); \
@@ -139,14 +139,19 @@ rhash_hash_info rhash_openssl_hash_info[
  */
 static int load_openssl_runtime(void)
 {
-#ifdef _WIN32
+#if defined(_WIN32) || defined(__CYGWIN__)
 	HMODULE handle;
 	/* suppress the error popup dialogs */
 	UINT oldErrorMode = SetErrorMode(SEM_FAILCRITICALERRORS);
 	SetErrorMode(oldErrorMode | SEM_FAILCRITICALERRORS);
 
+ #if defined(_WIN32)
 	handle = LoadLibraryA("libeay32.dll");
-
+ #elif defined(__MSYS__) /*  MSYS also defines __CYGWIN__ */
+        handle = LoadLibraryA("msys-crypto-1.0.0.dll");
+ #elif defined(__CYGWIN__)
+        handle = LoadLibraryA("cygcrypto-1.0.0.dll");
+ #endif
 	SetErrorMode(oldErrorMode); /* restore error mode */
 #else
 	void* handle = dlopen("libcrypto.so", RTLD_NOW);
--- RHash-1.3.5/librhash/rhash_timing.c.orig	2017-10-06 00:16:48.308932100 -0400
+++ RHash-1.3.5/librhash/rhash_timing.c	2017-10-06 00:19:19.598856900 -0400
@@ -15,7 +15,7 @@
  */
 
 /* modifier for Windows dll */
-#if defined(_WIN32) && defined(RHASH_EXPORTS)
+#if (defined(_WIN32) || defined(__CYGWIN__)) && defined(RHASH_EXPORTS)
 # define RHASH_API __declspec(dllexport)
 #endif
 
@@ -45,7 +45,7 @@ static uint64_t read_tsc(void) {
 
 /* TIMER FUNCTIONS */
 
-#ifdef _WIN32
+#if defined(_WIN32) || defined(__CYGWIN__)
 #include <windows.h>
 #define get_timedelta(delta) QueryPerformanceCounter((LARGE_INTEGER*)delta)
 #else
@@ -64,7 +64,7 @@ static uint64_t read_tsc(void) {
  */
 static double fsec(timedelta_t* timer)
 {
-#ifdef _WIN32
+#if defined(_WIN32) || defined(__CYGWIN__)
 	LARGE_INTEGER freq;
 	QueryPerformanceFrequency(&freq);
 	return (double)*timer / freq.QuadPart;
@@ -99,7 +99,7 @@ double rhash_timer_stop(timedelta_t* tim
 {
 	timedelta_t end;
 	get_timedelta(&end);
-#ifdef _WIN32
+#if defined(_WIN32) || defined(__CYGWIN__)
 	*timer = end - *timer;
 #else
 	timer->tv_sec  = end.tv_sec  - timer->tv_sec - (end.tv_usec >= timer->tv_usec ? 0 : 1);
@@ -108,7 +108,7 @@ double rhash_timer_stop(timedelta_t* tim
 	return fsec(timer);
 }
 
-#ifdef _WIN32
+#if defined(_WIN32) || defined(__CYGWIN__)
 /**
  * Set process priority and affinity to use all cpu's but the first one.
  * This improves benchmark results on a multi-cpu systems.
@@ -181,7 +181,7 @@ void rhash_run_benchmark(unsigned hash_i
 	double cpb = 0;
 #endif /* HAVE_TSC */
 
-#ifdef _WIN32
+#if defined(_WIN32) || defined(__CYGWIN__)
 	benchmark_cpu_init(); /* set cpu affinity to improve test results */
 #endif
 
--- RHash-1.3.5/librhash/rhash_timing.h.orig	2017-10-06 00:54:34.907813000 -0400
+++ RHash-1.3.5/librhash/rhash_timing.h	2017-10-06 00:57:03.194730500 -0400
@@ -18,7 +18,7 @@ extern "C" {
 #endif
 
 /* portable timer definition */
-#ifdef _WIN32
+#if defined(_WIN32) || defined(__CYGWIN__)
 typedef unsigned long long timedelta_t;
 #else
 #include <sys/time.h> /* for timeval */

--- RHash-1.3.5/librhash/rhash_torrent.c.orig	2017-10-05 07:57:26.804797900 -0400
+++ RHash-1.3.5/librhash/rhash_torrent.c	2017-10-05 07:57:26.801797500 -0400
@@ -16,7 +16,7 @@
 #include <assert.h>
 
 /* modifier for Windows DLL */
-#if defined(_WIN32) && defined(RHASH_EXPORTS)
+#if (defined(_WIN32) || defined(__CYGWIN__) ) && defined(RHASH_EXPORTS)
 # define RHASH_API __declspec(dllexport)
 #endif
 
--- RHash-1.3.5/librhash/test_hashes.h.orig	2017-08-13 20:56:22.000000000 -0400
+++ RHash-1.3.5/librhash/test_hashes.h	2017-10-05 07:13:34.535211100 -0400
@@ -186,6 +186,12 @@ char* compiler_flags = "Compile-time fla
 #ifdef __MINGW32__
 	" __MINGW32__"
 #endif
+#ifdef __CYGWIN__
+        " __CYGWIN__"
+#endif
+#ifdef __MSYS__
+        " __MSYS__"
+#endif
 #ifdef _WIN32
 	" _WIN32"
 #endif
--- RHash-1.3.5/tests/test_rhash.sh.orig	2017-08-13 20:56:22.000000000 -0400
+++ RHash-1.3.5/tests/test_rhash.sh	2017-10-06 08:27:02.317400600 -0400
@@ -184,7 +184,19 @@ rm test1K.data.hash
 new_test "test *accept options:       "
 rm -rf test_dir/
 mkdir test_dir 2>/dev/null && touch test_dir/file.txt test_dir/file.bin
-if [ -n "$MSYSTEM" ]; then SLASH=//; else SLASH="/"; fi # correctly handle MSYS posix path conversion
+#JPM Note - this fails to work.  MSYS seems to handle this correctly (at least here.
+SLASH="/"
+if [ -n "$MSYSTEM" ]; then
+ case "$MSYSTEM" in
+   MINGW32|MINGW64)
+    SLASH=//;
+   ;;
+   *)
+    SLASH="/";
+ esac
+else
+  SLASH="/";
+fi # correctly handle MSYS posix path conversion
 TEST_RESULT=$( $rhash -rC --simple --accept=.bin --path-separator=$SLASH test_dir )
 check "$TEST_RESULT" "00000000  test_dir/file.bin" .
 TEST_RESULT=$( $rhash -rC --simple --accept=.txt --path-separator=\\ test_dir )
