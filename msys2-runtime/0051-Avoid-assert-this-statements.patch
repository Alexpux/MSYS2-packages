From e213212478d57aa84d6f1427580a55ac1c982f3d Mon Sep 17 00:00:00 2001
From: Johannes Schindelin <johannes.schindelin@gmx.de>
Date: Mon, 3 Jul 2017 16:18:49 +0200
Subject: [PATCH 51/N] Avoid `assert (this);` statements

It may have been legal C++ at some stage to run methods with `this`
pointing to `NULL`, but it is no longer legal to do so. For `assert`
statements, G++ v6.3.0 does not yet spit out errors, but mere warnings:

	warning: nonnull argument 'this' compared to NULL [-Wnonnull-compare]

It is only a matter of time until these warnings will be turned into
errors, so let's just get rid of those statements.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
---
 winsup/cygserver/process.cc        | 3 ---
 winsup/cygserver/threaded_queue.cc | 4 ----
 2 files changed, 7 deletions(-)

diff --git a/winsup/cygserver/process.cc b/winsup/cygserver/process.cc
index f0fe4ec..c263414 100644
--- a/winsup/cygserver/process.cc
+++ b/winsup/cygserver/process.cc
@@ -172,7 +172,6 @@ process::cleanup ()
 void
 process_cache::submission_loop::request_loop ()
 {
-  assert (this);
   assert (_cache);
   assert (_interrupt_event);
 
@@ -377,7 +376,6 @@ process_cache::wait_for_processes (const HANDLE interrupt_event)
 size_t
 process_cache::sync_wait_array (const HANDLE interrupt_event)
 {
-  assert (this);
   assert (interrupt_event && interrupt_event != INVALID_HANDLE_VALUE);
 
   /* Always reset _cache_add_trigger before filling up the array again. */
@@ -424,7 +422,6 @@ process_cache::sync_wait_array (const HANDLE interrupt_event)
 void
 process_cache::check_and_remove_process (const size_t index)
 {
-  assert (this);
   assert (index < elements (_wait_array) - SPECIALS_COUNT);
 
   class process *const process = _process_array[index];
diff --git a/winsup/cygserver/threaded_queue.cc b/winsup/cygserver/threaded_queue.cc
index df0bc0c..72f2a5f 100644
--- a/winsup/cygserver/threaded_queue.cc
+++ b/winsup/cygserver/threaded_queue.cc
@@ -85,7 +85,6 @@ threaded_queue::~threaded_queue ()
 void
 threaded_queue::add_submission_loop (queue_submission_loop *const submitter)
 {
-  assert (this);
   assert (submitter);
   assert (submitter->_queue == this);
   assert (!submitter->_next);
@@ -158,7 +157,6 @@ threaded_queue::stop ()
 void
 threaded_queue::add (queue_request *const therequest)
 {
-  assert (this);
   assert (therequest);
   assert (!therequest->_next);
 
@@ -313,7 +311,6 @@ queue_submission_loop::~queue_submission_loop ()
 bool
 queue_submission_loop::start ()
 {
-  assert (this);
   assert (!_hThread);
 
   const bool was_running = _running;
@@ -337,7 +334,6 @@ queue_submission_loop::start ()
 bool
 queue_submission_loop::stop ()
 {
-  assert (this);
   assert (_hThread && _hThread != INVALID_HANDLE_VALUE);
 
   const bool was_running = _running;
-- 
2.9.0

