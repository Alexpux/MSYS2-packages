From ce9c7149fbb61d3c992c0adf86d6a3ee37a28045 Mon Sep 17 00:00:00 2001
From: Johannes Schindelin <johannes.schindelin@gmx.de>
Date: Thu, 5 Oct 2017 14:40:32 +0200
Subject: [PATCH 55/N] fixup! Avoid `assert (this);` statements

Turns out that these are actually not all that stupid (see
https://github.com/git-for-windows/git/issues/1316).

We *have* to compile this code with -Wno-error=nonnull-compare.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
---
 winsup/cygserver/process.cc        | 3 +++
 winsup/cygserver/threaded_queue.cc | 4 ++++
 2 files changed, 7 insertions(+)

diff --git a/winsup/cygserver/process.cc b/winsup/cygserver/process.cc
index c263414..f0fe4ec 100644
--- a/winsup/cygserver/process.cc
+++ b/winsup/cygserver/process.cc
@@ -172,6 +172,7 @@ process::cleanup ()
 void
 process_cache::submission_loop::request_loop ()
 {
+  assert (this);
   assert (_cache);
   assert (_interrupt_event);
 
@@ -376,6 +377,7 @@ process_cache::wait_for_processes (const HANDLE interrupt_event)
 size_t
 process_cache::sync_wait_array (const HANDLE interrupt_event)
 {
+  assert (this);
   assert (interrupt_event && interrupt_event != INVALID_HANDLE_VALUE);
 
   /* Always reset _cache_add_trigger before filling up the array again. */
@@ -422,6 +424,7 @@ process_cache::sync_wait_array (const HANDLE interrupt_event)
 void
 process_cache::check_and_remove_process (const size_t index)
 {
+  assert (this);
   assert (index < elements (_wait_array) - SPECIALS_COUNT);
 
   class process *const process = _process_array[index];
diff --git a/winsup/cygserver/threaded_queue.cc b/winsup/cygserver/threaded_queue.cc
index 72f2a5f..df0bc0c 100644
--- a/winsup/cygserver/threaded_queue.cc
+++ b/winsup/cygserver/threaded_queue.cc
@@ -85,6 +85,7 @@ threaded_queue::~threaded_queue ()
 void
 threaded_queue::add_submission_loop (queue_submission_loop *const submitter)
 {
+  assert (this);
   assert (submitter);
   assert (submitter->_queue == this);
   assert (!submitter->_next);
@@ -157,6 +158,7 @@ threaded_queue::stop ()
 void
 threaded_queue::add (queue_request *const therequest)
 {
+  assert (this);
   assert (therequest);
   assert (!therequest->_next);
 
@@ -311,6 +313,7 @@ queue_submission_loop::~queue_submission_loop ()
 bool
 queue_submission_loop::start ()
 {
+  assert (this);
   assert (!_hThread);
 
   const bool was_running = _running;
@@ -334,6 +337,7 @@ queue_submission_loop::start ()
 bool
 queue_submission_loop::stop ()
 {
+  assert (this);
   assert (_hThread && _hThread != INVALID_HANDLE_VALUE);
 
   const bool was_running = _running;
-- 
2.9.0

