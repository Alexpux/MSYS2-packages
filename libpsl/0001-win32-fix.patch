--- libpsl-0.16.1/src/psl.c.orig	2016-12-12 05:11:05.000000000 -0500
+++ libpsl-0.16.1/src/psl.c	2016-12-22 20:36:27.998933900 -0500
@@ -54,8 +54,14 @@
 
 #include <sys/types.h>
 #include <sys/stat.h>
+#if (defined(_WIN32_) || defined(__WIN32__) || defined(WIN32)) && !defined(__CYGWIN__)
+#include <winsock2.h> // Must be the first to include
+#include <ws2tcpip.h>
+#include <windows.h>
+#else
 #include <sys/socket.h>
 #include <netinet/in.h>
+#endif
 #include <unistd.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -64,8 +70,10 @@
 #include <time.h>
 #include <errno.h>
 #include <limits.h> /* for UINT_MAX */
+#if !defined(_WIN32_) && !defined(__WIN32__) && !defined(WIN32)
 #include <langinfo.h>
 #include <arpa/inet.h>
+#endif
 #ifdef HAVE_ALLOCA_H
 #	include <alloca.h>
 #endif
@@ -1492,6 +1503,212 @@
 	return PSL_VERSION_NUMBER;
 }
 
+#if (defined(_WIN32_) || defined(__WIN32__) || defined(WIN32)) && !defined(__CYGWIN__)
+/*
+ * Copyright (c) 2004 by Internet Systems Consortium, Inc. ("ISC")
+ * Copyright (c) 1996,1999 by Internet Software Consortium.
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
+ * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+/*%
+ * WARNING: Don't even consider trying to compile this on a system where
+ * sizeof(int) < 4.  sizeof(int) > 4 is fine; all the world's not a VAX.
+ */
+
+static int	inet_pton4(const char *src, u_char *dst);
+static int	inet_pton6(const char *src, u_char *dst);
+
+/* int
+ * inet_pton(af, src, dst)
+ *	convert from presentation format (which usually means ASCII printable)
+ *	to network format (which is usually some kind of binary format).
+ * return:
+ *	1 if the address was valid for the specified address family
+ *	0 if the address wasn't valid (`dst' is untouched in this case)
+ *	-1 if some other error occurred (`dst' is untouched in this case, too)
+ * author:
+ *	Paul Vixie, 1996.
+ */
+int
+inet_pton(int af, const char *src, void *dst)
+{
+	switch (af) {
+	case AF_INET:
+		return (inet_pton4(src, dst));
+	case AF_INET6:
+		return (inet_pton6(src, dst));
+	default:
+		return (-1);
+	}
+	/* NOTREACHED */
+}
+
+/* int
+ * inet_pton4(src, dst)
+ *	like inet_aton() but without all the hexadecimal and shorthand.
+ * return:
+ *	1 if `src' is a valid dotted quad, else 0.
+ * notice:
+ *	does not touch `dst' unless it's returning 1.
+ * author:
+ *	Paul Vixie, 1996.
+ */
+static int
+inet_pton4(const char *src, u_char *dst)
+{
+	static const char digits[] = "0123456789";
+	int saw_digit, octets, ch;
+#define NS_INADDRSZ	4
+	u_char tmp[NS_INADDRSZ], *tp;
+
+	saw_digit = 0;
+	octets = 0;
+	*(tp = tmp) = 0;
+	while ((ch = *src++) != '\0') {
+		const char *pch;
+
+		if ((pch = strchr(digits, ch)) != NULL) {
+			u_int new = *tp * 10 + (pch - digits);
+
+			if (saw_digit && *tp == 0)
+				return (0);
+			if (new > 255)
+				return (0);
+			*tp = new;
+			if (!saw_digit) {
+				if (++octets > 4)
+					return (0);
+				saw_digit = 1;
+			}
+		} else if (ch == '.' && saw_digit) {
+			if (octets == 4)
+				return (0);
+			*++tp = 0;
+			saw_digit = 0;
+		} else
+			return (0);
+	}
+	if (octets < 4)
+		return (0);
+	memcpy(dst, tmp, NS_INADDRSZ);
+	return (1);
+}
+
+/* int
+ * inet_pton6(src, dst)
+ *	convert presentation level address to network order binary form.
+ * return:
+ *	1 if `src' is a valid [RFC1884 2.2] address, else 0.
+ * notice:
+ *	(1) does not touch `dst' unless it's returning 1.
+ *	(2) :: in a full address is silently ignored.
+ * credit:
+ *	inspired by Mark Andrews.
+ * author:
+ *	Paul Vixie, 1996.
+ */
+static int
+inet_pton6(const char *src, u_char *dst)
+{
+	static const char xdigits_l[] = "0123456789abcdef",
+			  xdigits_u[] = "0123456789ABCDEF";
+#define NS_IN6ADDRSZ	16
+#define NS_INT16SZ	2
+	u_char tmp[NS_IN6ADDRSZ], *tp, *endp, *colonp;
+	const char *xdigits, *curtok;
+	int ch, seen_xdigits;
+	u_int val;
+
+	memset((tp = tmp), '\0', NS_IN6ADDRSZ);
+	endp = tp + NS_IN6ADDRSZ;
+	colonp = NULL;
+	/* Leading :: requires some special handling. */
+	if (*src == ':')
+		if (*++src != ':')
+			return (0);
+	curtok = src;
+	seen_xdigits = 0;
+	val = 0;
+	while ((ch = *src++) != '\0') {
+		const char *pch;
+
+		if ((pch = strchr((xdigits = xdigits_l), ch)) == NULL)
+			pch = strchr((xdigits = xdigits_u), ch);
+		if (pch != NULL) {
+			val <<= 4;
+			val |= (pch - xdigits);
+			if (++seen_xdigits > 4)
+				return (0);
+			continue;
+		}
+		if (ch == ':') {
+			curtok = src;
+			if (!seen_xdigits) {
+				if (colonp)
+					return (0);
+				colonp = tp;
+				continue;
+			} else if (*src == '\0') {
+				return (0);
+			}
+			if (tp + NS_INT16SZ > endp)
+				return (0);
+			*tp++ = (u_char) (val >> 8) & 0xff;
+			*tp++ = (u_char) val & 0xff;
+			seen_xdigits = 0;
+			val = 0;
+			continue;
+		}
+		if (ch == '.' && ((tp + NS_INADDRSZ) <= endp) &&
+		    inet_pton4(curtok, tp) > 0) {
+			tp += NS_INADDRSZ;
+			seen_xdigits = 0;
+			break;	/*%< '\\0' was seen by inet_pton4(). */
+		}
+		return (0);
+	}
+	if (seen_xdigits) {
+		if (tp + NS_INT16SZ > endp)
+			return (0);
+		*tp++ = (u_char) (val >> 8) & 0xff;
+		*tp++ = (u_char) val & 0xff;
+	}
+	if (colonp != NULL) {
+		/*
+		 * Since some memmove()'s erroneously fail to handle
+		 * overlapping regions, we'll do the shift by hand.
+		 */
+		const int n = tp - colonp;
+		int i;
+
+		if (tp == endp)
+			return (0);
+		for (i = 1; i <= n; i++) {
+			endp[- i] = colonp[n - i];
+			colonp[n - i] = 0;
+		}
+		tp = endp;
+	}
+	if (tp != endp)
+		return (0);
+	memcpy(dst, tmp, NS_IN6ADDRSZ);
+	return (1);
+}
+
+
+#endif
+
 /* return whether hostname is an IP address or not */
 static int _isip(const char *hostname)
 {
--- libpsl-0.16.1/configure.ac.orig	2016-12-15 07:01:19.000000000 -0500
+++ libpsl-0.16.1/configure.ac	2016-12-22 14:14:50.741176000 -0500
@@ -10,7 +10,7 @@
 AC_PROG_CC
 m4_ifdef([AM_PROG_AR], [AM_PROG_AR])
 #LT_INIT([disable-static])
-LT_INIT
+LT_INIT([win32-dll])
 AC_CONFIG_MACRO_DIR([m4])
 m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])
 
@@ -26,6 +26,18 @@
 AC_SUBST([LIBPSL_VERSION_NUMBER], [`printf '0x%02x%02x%02x' $LIBPSL_VERSION_MAJOR $LIBPSL_VERSION_MINOR $LIBPSL_VERSION_PATCH`])
 AC_CONFIG_FILES([include/libpsl.h])
 
+case "$target_os" in
+mingw*)
+  AC_CHECK_LIB(ws2_32, _head_libws2_32_a,,
+
+      AC_CHECK_LIB(ws2_32, _head_lib32_libws2_32_a,,
+
+          AC_MSG_ERROR([winsock2 is required])
+
+  ))
+  ;;
+*)
+esac;
 #
 # Gettext
 #
--- libpsl-0.16.1/src/lookup_string_in_fixed_set.c.orig	2016-12-23 09:27:33.507553200 -0500
+++ libpsl-0.16.1/src/lookup_string_in_fixed_set.c	2016-12-23 10:21:06.766020800 -0500
@@ -13,10 +13,29 @@
 #       define _GCC_VERSION_AT_LEAST(major, minor) 0
 #endif
 
-#if _GCC_VERSION_AT_LEAST(4,0)
-#  define _HIDDEN __attribute__ ((visibility ("hidden")))
-#else
+#if defined _WIN32 || defined _WIN32_ ||defined __CYGWIN__
+#  ifdef BUILDING_DLL
+#    ifdef __GNUC__
+#        define DLL_PUBLIC __attribute__ ((dllexport))
+#    else
+#        define DLL_PUBLIC __declspec(dllexport) // Note: actually gcc seems to also supports this syntax.
+#    endif
+#  else
+#    ifdef __GNUC__
+#      define DLL_PUBLIC __attribute__ ((dllimport))
+#    else
+#      define DLL_PUBLIC __declspec(dllimport) // Note: actually gcc seems to also supports this syntax.
+#    endif
+#  endif
 #  define _HIDDEN
+#else
+#  if _GCC_VERSION_AT_LEAST(4,0)
+#    define DLL_PUBLIC __attribute__ ((visibility ("default")))
+#    define _HIDDEN __attribute__ ((visibility ("hidden")))
+#  else
+#    define DLL_PUBLIC
+#    define _HIDDEN
+#  endif
 #endif
 
 #define CHECK_LT(a, b) if ((a) >= b) return 0

